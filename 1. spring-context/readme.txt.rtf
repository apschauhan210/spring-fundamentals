{\rtf1\ansi\ansicpg1252\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 HelveticaNeue-Bold;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Spring-Context:\
\
The main concept of spring is dependency injection i.e. we can get the object of the entity we want by the spring. For that we need to place the object in the springs context. We can place the bean in the context either by \
1. XML configuration(Old style: not used)\
2. Annotations\
\
There are 2 types of annotations to place the bean in the context:\
1. @Bean()\
2. @Component()    // Stereotype annotation. Can read more from spring notes.\
\
@Bean is used over functions in Configuration class(annotated with @Configuration) which returns the bean of the specified type which is then placed by spring in the context. We can configure the bean as we want.\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\fs26 \cf0 Through @Bean we can create multiple instances of a particular type\
\
\pard\pardeftab560\slleading20\partightenfactor0

\f2\b \cf0 @Component
\f1\b0  is used over classes and to do the configuration we need to define a function and annotate it with @PostConstruct which will be executed by the spring whenever the object of bean is created. Through @Component we can create only one instance at a time(which is enough most of the time)}